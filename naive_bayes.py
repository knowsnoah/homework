# -*- coding: utf-8 -*-
"""naive_bayes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U_cnj9HX_-bNU_u2mrMHk8OXm-2D4UvP
"""

#-------------------------------------------------------------------------
# AUTHOR: Noah Ojeda
# FILENAME: naive_bayes.py
# SPECIFICATION: This program trains NB on weather_training.cvs and print test predictons
#             with the corresponding confidence
# FOR: CS 4210- Assignment #2
# TIME SPENT: ~1hr
#-----------------------------------------------------------*/
#IMPORTANT NOTE: YOU ARE ALLOWED TO USE ANY PYTHON LIBRARY TO COMPLETE THIS PROGRAM
#Importing some Python libraries
from sklearn.naive_bayes import GaussianNB
import pandas as pd

dbTraining = []
dbTest = []

#Reading the training data using Pandas
df = pd.read_csv('weather_training.csv')
for _, row in df.iterrows():
  dbTraining.append(row.tolist())

#Transform the original training features to numbers and add them to the 4D array X.
#For instance Sunny = 1, Overcast = 2, Rain = 3, X = [[3, 1, 1, 2], [1, 3, 2, 2], ...]]
#--> add your Python code here
outlook_map = {'Sunny': 1, 'Overcast': 2, 'Rain': 3}
temp_map = {'Hot': 1, 'Mild': 2, 'Cool': 3}
humidity_map = {'High': 1, 'Normal': 2}
wind_map = {'Weak': 1, 'Strong': 2}

X = []
for i in range(len(dbTraining)):
  row = dbTraining[i]

  outlook_val = outlook_map[str(row[1])]
  temp_val = temp_map[str(row[2])]
  humidity_val = humidity_map[str(row[3])]
  wind_val = wind_map[str(row[4])]
  X.append([outlook_val, temp_val, humidity_val, wind_val]) #adding them to X

#Transform the original training classes to numbers and add them to the vector Y.
#For instance Yes = 1, No = 2, so Y = [1, 1, 2, 2, ...]
#--> add your Python code here
class_map = {'Yes': 1, 'No': 2}
inv_class_map = {1: 'Yes', 2: 'No '}
Y = []
for i in range(len(dbTraining)):
  row = dbTraining[i]
  Y.append(class_map[str(row[5])]) #adding them to Y

#Fitting the naive bayes to the data using smoothing
#--> add your Python code here
clf = GaussianNB()
clf.fit(X, Y)

#Reading the test data using Pandas
df = pd.read_csv('weather_test.csv')
for _, row in df.iterrows():
  dbTest.append(row.tolist())

#Printing the header os the solution
#--> add your Python code here
print("Day Outlook Temperature Humidity Wing PlayTennis Confidence")

#Use your test samples to make probabilistic predictions. For instance: clf.predict_proba([[3, 1, 2, 1]])[0]
#--> add your Python code here
THRESHOLD = 0.75

for i in range(len(dbTest)):
  row = dbTest[i]
  # row order: Day, Outlook, Temperature, Humidity, Wind
  day = row[0]
  outlook_s = str(row[1])
  temp_s = str(row[2])
  humidity_s = str(row[3])
  wind_s = str(row[4])

  # Encode features
  x_outlook  = outlook_map[outlook_s]
  x_temp     = temp_map[temp_s]
  x_humidity = humidity_map[humidity_s]
  x_wind     = wind_map[wind_s]

  x_vec = [[x_outlook, x_temp, x_humidity, x_wind]]

  #Predicting the probabilities
  proba = clf.predict_proba(x_vec)[0]   # aligned with clf.classes_
  #finding argmax and its confidence
  max_idx = 0 if proba[0] >= proba[1] else 1
  predicted_class_num = int(clf.classes_[max_idx])
  confidence = float(proba[max_idx])

  if confidence >= THRESHOLD:
    predicted_label = inv_class_map[predicted_class_num]
    #return outputs in the given format
    #Day Outlook Temperature Humidity Wind PlayTennis Confidence
    print(f"{day} {outlook_s}  {temp_s}       {humidity_s}      {wind_s}    {predicted_label}   {confidence:.2f}")